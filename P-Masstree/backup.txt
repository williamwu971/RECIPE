INSERT

//        PMEMoid ht_oid;
//        if (pmemobj_alloc(pop, &ht_oid,
//                          value_size, TOID_TYPE_NUM(struct masstree_obj),
//                          0, 0)) {
//            fprintf(stderr, "pmemobj_alloc failed for obj_memalign\n");
//            assert(0);
//        }
//        struct masstree_obj *mo = (struct masstree_obj *) pmemobj_direct(ht_oid);
//        mo->data = p_value;
//        mo->ht_oid = ht_oid;
//
//        pmemobj_persist(pop, mo, sizeof(struct masstree_obj));
//        pmemobj_memset_persist(pop, mo + 1, 7, memset_size);
//
//        tree->put_and_return(p_key, mo, 1, 0, t);


//        TX_BEGIN(pop) {
//
//                        TOID(struct masstree_obj) objToid = TX_ALLOC(struct masstree_obj, value_size);
//
//                                D_RW (objToid)->objToid = objToid;
//                                D_RW(objToid)->data = p_value;
//
//                        memset(((uint64_t *) (&D_RW(objToid)->data)) + 1, 7,
//                               value_size - sizeof(struct masstree_obj)
//                        );
//
//
//                        tree->put_and_return(p_key, D_RW(objToid), 1, 0, t);
//
//
//                    }
//                        TX_ONABORT {
//                        throw;
//                    }
//        TX_END

UPDATE

        PMEMoid ht_oid;
        if (pmemobj_alloc(pop, &ht_oid,
                          value_size, TOID_TYPE_NUM(struct masstree_obj),
                          0, 0)) {
            fprintf(stderr, "pmemobj_alloc failed for obj_memalign\n");
            assert(0);
        }
        struct masstree_obj *mo = (struct masstree_obj *) pmemobj_direct(ht_oid);
        mo->data = u_value;
        mo->ht_oid = ht_oid;

        pmemobj_persist(pop, mo, sizeof(struct masstree_obj));
        pmemobj_memset_persist(pop, mo + 1, 7, memset_size);

        struct masstree_obj *old_obj =
                (struct masstree_obj *)
                        tree->put_and_return(u_key, mo, 1, 0, t);

        if (no_allow_prev_null || old_obj != NULL) {
            pmemobj_free(&old_obj->ht_oid);
        }

//                    TX_BEGIN(pop) {
//
//                                    TOID(struct masstree_obj) objToid =
//                                            TX_ALLOC(struct masstree_obj, value_size);
//
//                                            D_RW(objToid)->objToid = objToid;
//                                            D_RW(objToid)->data = keys[i];
//
//                                    memset(((uint64_t *) (&D_RW(objToid)->data)) + 1, 7,
//                                           value_size - sizeof(struct masstree_obj)
//                                    );
//
//                                    printf("key: %lu pointer: %p\n", keys[i],
//                                           tree->get(keys[i], t));
//
//                                    struct masstree_obj *obj = (struct masstree_obj *)
//                                            tree->put_and_return(u_key, D_RW(objToid), 0, 0, t);
//
//
//                                    printf("key: %lu pointer: %p\n", keys[i], obj);
//
//                                    TX_FREE(obj->objToid);
//
//                                }
//                                    TX_ONABORT {
//                                    throw;
//                                }
//                    TX_END